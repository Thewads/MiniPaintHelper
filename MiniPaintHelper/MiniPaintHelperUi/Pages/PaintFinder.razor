@page "/paintfinder"
@using MudBlazor.Utilities
@using Services
@using Services.Models
@inject IPaintService PaintService

<CustomHeadContent Title="Paint Finder" Overview="Tool to find paints that match a given RGB value" Keywords="@(new []{"miniatures", "minis", "paint", "painting"})" />

<MudContainer>
    <PageHeader Title="Paint Finder" ContentLines="_headerLines"/>

    <MudGrid>
        <MudItem xs="12">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudChipSet @bind-SelectedChip="_selectedMode" SelectedValuesChanged="SelectedValuesChanged" Filter="true" Mandatory="true">
                    <MudChip Text="Closest" Default="true"></MudChip>
                    <MudChip Text="Contrasting"></MudChip>
                </MudChipSet>
            </MudStack>
        </MudItem>

        <ElementContainer>
            <MudAutocomplete T="Paint"
                             Label="Paint Name"
                             SearchFunc="@SearchForPaint"
                             ValueChanged="@SearchValueChanged"
                             Clearable="true"
                             ToStringFunc="@(e => e.Name + " - " + e.Brand)"
                             ResetValueOnEmptyText="true"
                             Style="width: 300px"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"/>

            <MudColorPicker @ref="_colorPicker"
                            class="object-center"
                            PickerVariant="PickerVariant.Static"
                            DisableAlpha="true"
                            DisablePreview="true"
                            DisableDragEffect="true"
                            ValueChanged="GetPaintsFromColor"/>
        </ElementContainer>

        <ElementContainer>
            <PaintResults @ref="_paintResults" />
        </ElementContainer>
    </MudGrid>
</MudContainer>


@code {
    private MudColorPicker _colorPicker = default!;
    private MudChip _selectedMode = default!;

    private MudColor _selectedColor = default!;
    PaintResults _paintResults = default!;

    private readonly IList<string> _headerLines = new List<string>
    {
        "Select mode of operation to get the type of search you want",
        "Then select a paint from the search menu, or select a color using the picker, and get results returned in table on right"
    };
    
    private void GetPaintsFromColor(MudColor? selectedColor)
    {
        if (selectedColor == null) return;
        _selectedColor = selectedColor;
        
        _paintResults.GetPaintsFromColor(selectedColor.R, selectedColor.G, selectedColor.B, 
            _selectedMode.Text == "Closest" ? PaintResults.PaintRetrievalMode.Closest : PaintResults.PaintRetrievalMode.Contrasting);
        StateHasChanged();
    }

    private async Task<IEnumerable<Paint>> SearchForPaint(string searchTerm)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            return new List<Paint>();
        }
        
        var result = await PaintService.GetPaint(searchTerm);
        return !result.Any() ? new List<Paint>() : result;
    }

    private void SearchValueChanged(Paint? newValue)
    {
        if (newValue == null) return;
        _colorPicker.SetR(newValue.Rgb.R);
        _colorPicker.SetG(newValue.Rgb.G);
        _colorPicker.SetB(newValue.Rgb.B);
    }

    private void SelectedValuesChanged()
    {
        GetPaintsFromColor(_selectedColor);
    }
}