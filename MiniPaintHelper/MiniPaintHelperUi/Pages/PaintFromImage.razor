@page "/paintfromimage"
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

<MudContainer>
    <PageHeader Title="Paint Finder From Image" ContentLines="_headerLines"/>
    
    <MudGrid>
        <ElementContainer>
            <div class="file-drop-zone @_hoverClass" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragEnter">
                <InputFile OnChange="@OnChange" @ref="_inputFile" />
            </div>
            <div id="canvas_container" style="width: 25rem; height:25rem; overflow: auto">
                <canvas width="600" height="300" id="canvas_picker" style="display: block" @ref="_canvas"></canvas>
            </div>
        </ElementContainer>
        
        <ElementContainer>
            <PaintResults @ref="_paintResults" />
        </ElementContainer>
        
    </MudGrid>
</MudContainer>

@code {
    PaintResults _paintResults = default!;
    
    readonly IList<string> _headerLines = new List<string>
    {
        "Upload an image, and click on the colour you want to find a matching paint for",
        "Upload by clicking the browse button, dragging an image into the dropzone, or copy and paste into the page"
    };

    
    IJSObjectReference _filePasteModule = default!;
    IJSObjectReference _filePasteFunctionReference = default!;
    IJSObjectReference _canvasPickerModule = default!;
    IJSObjectReference _canvasPickerFunctionReference = default!;
    ElementReference _canvas;
    InputFile _inputFile = default!;
    private string _hoverClass = "";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _filePasteModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", new []{"./js/filePaste.js"});
            _filePasteFunctionReference = await _filePasteModule.InvokeAsync<IJSObjectReference>("initializeFilePaste");
            
            var dotNetReference = DotNetObjectReference.Create(this);
            _canvasPickerModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", new []{"./js/canvasPicker.js"});
            _canvasPickerFunctionReference = await _canvasPickerModule.InvokeAsync<IJSObjectReference>("initializeCanvasPicker", _canvas, dotNetReference);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void OnDragEnter(DragEventArgs e) => _hoverClass = "hover";

    void OnDragLeave(DragEventArgs e) => _hoverClass = string.Empty;
    
    async Task OnChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(1))
        {
            await using var stream = file.OpenReadStream(maxAllowedSize: long.MaxValue);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            await _canvasPickerModule.InvokeVoidAsync("setCanvasImage", Convert.ToBase64String(ms.ToArray()));
        }

        _hoverClass = string.Empty;
    }
    
    public async ValueTask DisposeAsync()
    {
        await _filePasteFunctionReference.InvokeVoidAsync("dispose");
        await _filePasteFunctionReference.DisposeAsync();
        await _filePasteModule.DisposeAsync();
        
        
        await _canvasPickerFunctionReference.InvokeVoidAsync("dispose");
        await _canvasPickerFunctionReference.DisposeAsync();
        await _canvasPickerModule.DisposeAsync();
    }

    [JSInvokable]
    public void ColorPicked(int r, int g, int b)
    {
        _paintResults.GetPaintsFromColor(r, g, b);
    }

}